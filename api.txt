## Логин и параметры пользователя.

route: 'api/login',
method: POST,
body: {
  username: 'username',
  password: 'password'
},
response: token: 'token',
description: если успешно, ожидаю получить токен. Если нет, ошибку 401 (или 403). Если пользователь заблокирован - 423.

* во всех остальных запросах токен будет прикрепляться в соответствующий заголовок запроса.

//route: 'api/user',
route: 'api/info',
method: GET,
response: {
  name: 'ФИО',
  position: 'должность',
  isAdmin: true/false,
  isUser: true/false,
  firstLogin: true/false
}
description: планирую получить всю информацию о пользователе, (в дальнейшем возможно будем дополнять),

route: 'api/settings',
method: GET,
response: {
  speed: true/false,
  park: true/false,
  trajectory: true/false,
  defaultModesSettings: [
    {
      auto: {
        fines: ['12.9']
      },
      automated: {
        speedLimit: 82,
        maxFines: 1,
        period: 2,
        pause: 5
      },
      combi: {
        speedLimit: 82,
        maxFines: 1,
        period: 2,
        pause: 5
      },
      delayRec: {
        duration: 1
      }
    }
  ],
  modesSettingsPacks: [
    {
      auto: {
        fines: ['12.5', '12.9']
      },
      automated: {
        speedLimit: 42,
        maxFines: 2,
        period: 1,
        pause: 3
      },
      combi: {
        speedLimit: 42,
        maxFines: 2,
        period: 1,
        pause: 3
      },
      delayRec: {
        duration: 0.5
      }
    }
  ],
  lastMode: 'combi',
  settings: {
    mobile: {
      isOn: true/false
    },
    notifications: {
      grs: {
        sound: true/false,
        banners: true/false
      }
    },
    sounds: {
      notify: 'sound1'
    }
  }
  permissions: {

  }
},
description: Все настройки пользователя. speed, park, trajectory: вклю/выкл 3 параметра определяющие включены или выключены внопки во втором тулбаре. defaultModesSettings: настройки режимов по умолчанию (заводские настройки, либо использованные последний раз).  modesSettingsPacks: массив сохраненных наборов настроек. lastMode: название или id последнего использованного режима. settings: настройки уведомлений, звуков и тд. permissions: объект со всей информацией, что пользователь может/не может использовать/конфигурировать (задается админом).

## Настройки

### Мобильный интернет

route: 'api/settings/mobile',
method: POST,
body: {
  isOn: true/false,
  turnOff: true/false,
  turnOn: true/false
},
response: {
  success,
  isOn: true/false
},
description: команда на включение/выключение мобильного интернета. Передаю текущее состояние и команду, выключить/включить. В ответ жду сообщение о успешности и новое состояние.
Думал еще это через сокеты реализовать, но так, наверное, будет надежнее.

route: 'api/settings/mobile/operators',
method: GET,
response: {
  operators: [
    {
      id: operatorId,
      title: operatorTitle
    }
  ]
},
description: Запрос списка мобильных операторов.

route: 'api/settings/mobile/operators',
method: POST,
body: {
  operator: operatorId
},
response: {
  success,
  operator: {
    id: operatorId,
    title: operatorTitle
  }
},
description: команда на переключение мобильного интернета. Передаю id оператора, выключить/включить. В ответ жду сообщение о успешности и id и title нового оператора.

### Уведомления

route: 'api/settings/notifications',
method: POST,
body: {
  type: grs,
  sounds: {
    isOn: true/false,
    turnOff: true/false,
    turnOn: true/false
  },
  banners: {
    isOn: true/false,
    turnOff: true/false,
    turnOn: true/false
  }
},
response: {
  success,
  type: grs,
  sounds: {
    isOn: true/false
  },
  banners: {
    isOn: true/false
  }
},
description: команда на включение/выключение оповещений. Передаю тип оповещения (совпадение ГРЗ например) текущее состояние и команду, выключить/включить. В ответ жду сообщение о успешности и новое состояние.

### Звуки

route: 'api/settings/sounds',
method: POST,
body: {
  type: notifications,
  sound: soundId
},
response: {
  success,
  type: notifications,
  sounds: soundId,
},
description: команда на сохранение звука оповещения. Передаю тип звука (оповещения) и выбранный звук. В ответ жду сообщение о успешности и новое состояние.




## Инфо по комплексу

route: 'api/statistics',
method: GET,
response: {
  connections: {
    traffic: '11mB',
    wifi: 3,
    gps: true/false, ?
    mobile: 3,
  },
  statistics: {
    startTime: timestamp,
    vehiclesTotal: 1785,
    foulsTotal: 206,
    sended: 150,
    queue: 56
  }

}
description: информация о соединениях, статистика работы комплекса, может быть что-то еще. traffic: объем переданных данных? wifi: сила сигнала (от 1 до 4). gps: подключен или нет ? mobile: сила сигнала (от 0 до 3). startTime: timestamp времени начала работы комплекса, vehiclesTotal: всего зафиксировано ТС, foulsTotal: всего зафиксировано нарушений. sended: отправлено фотоматериалов. queue: в очереди на отправку


## Карта
route: 'api/map,
method: GET,
response: {
  position: [59.912220, 30.317482],
  addres: 'addres'
}
description: position: массив с координатами местоположения, addres: адрес местоположения (улица)

## Инфо
route: 'api/mode-info,
method: GET,
response: {
  speedLimit: 60,
  edge: 81
}
description: speedLimit: разрешенная скорость, adge: порог фиксации

## Зафиксированные события
route: 'api/mode-events,
method: GET,
response: {
  events: [
    {
      id: eventId,
      img: base64 image,
      grs: 'c243oe178',
      speed: 90,
      time: timestamp
    }
  ]
}
description: events: массив зафиксированных событий в этой сессии, id: id события, img: фото в base64, grs: ГРЗ, speed: скорость, time: timestamp события

## Событие
route: 'api/event,
method: GET,
params: {
  id: eventId
}
response: {
  event: {
    id: eventId,
    img: base64 image,
    grs: 'c243oe178',
    speed: 90,
    time: timestamp,
    информация для страницы просмотра зафиксированного нарушения
  }
}
description: передаю id события. Хочу получить: event: объект зафиксированного события, id: id события, img: фото в base64, grs: ГРЗ, speed: скорость, time: timestamp события, и тд. (пока не понял по фигме, что конкретно там отображать и как)


## Настройки режимов

### Сохранение настроек режимов

#### Автоматический
route: 'api/settings/auto',
method: POST,
body: {
  fines: ['12.5', '12.9']
},
response: 'success' или 'ok',
description: запись настроек автоматического режима. Если успешно, ожидаю получить подтверждение "ок".

#### Автоматизированный
route: 'api/settings/automated',
method: POST,
body: {
  speedLimit: 42,
  maxFines: 2,
  period: 1,
  pause: 3
},
response: 'success' или 'ok',
description: запись настроек автоматизированного режима. Если успешно, ожидаю получить подтверждение "ок".

#### Комбинированный
route: 'api/settings/combi',
method: POST,
body: {
  speedLimit: 42,
  maxFines: 2,
  period: 1,
  pause: 3
},
response: 'success' или 'ok',
description: запись настроек комбинированного режима. Если успешно, ожидаю получить подтверждение "ок".

#### Комбинированный
route: 'api/settings/delay-rec',
method: POST,
body: {
  duration: 2,
},
response: 'success' или 'ok',
description: запись настроек отложенной записи. Если успешно, ожидаю получить подтверждение "ок".

### Сохранение наборов настроек

route: 'api/settings/modesSettingsPacks',
method: POST,
body: {
  index: 2,
},
response: 'success' или 'ok',
description: запись набора настроек всех режимов. Сохраняет в набор настроек все текущие настройки режимов. Буду передавать порядковый индекс набора настроек для сверки фронта и бека. Если успешно, ожидаю получить подтверждение "ок". Если достигнуто максимальное число наборов настроек, то буду проверять это на фронте, но, наверное, и на беке лучше тоже проверять и если что возвращать ошибку 409.

* Также в фигме этого нет, но, думаю, нужно предусмотреть и удаление наборов настроек. В ресте есть метод delete.

route: 'api/settings/modesSettingsPacks',
method: DELETE,
body: {
  index: 3,
},
response: 'success' или 'ok',
description: Удаляет выбранный набор настроек по его порядковому индексу. Если успешно, ожидаю получить подтверждение "ок".


## Поиск по ГРЗ
route: 'api/settings/search-grs',
method: GET,
params: {
  number: 'x111xx111',
},
response: {
  results: [
    {
      id: id,
      grs: 'x111xx111'
    },
    {
      id: id,
      grs: 'x111xx111'
    }
  ]
},
description: Хочу получить массив результатов поиска.

## Команды
route: 'api/shortcommand',
method: post,
body: {
  type: speed/park/trajectory
  on: true/false,
},
response: {
  success
},
description: Передаю тип комманды и состояние, в которое нужно перевести.

route: 'api/mode',
method: post,
body: {
  mode: idMode/titleMode
  on: true/false,
},
response: {
  success
},
description: Передаю тип режима и состояние, в которое нужно перевести.

route: 'api/cams',
method: post,
body: {
  cams: [idCam1, idCam2]
},
response: {
  success
},
description: Передаю массив, в котором передаю айдишники выбранных камер.


## Сокеты:
Я пока что не определился будет нам достаточно одного канала для сокетов или стоит сделать несколько (например один канал только под картинку и сообщениях о нарушениях, а второй для конфигурирования устройства, получения статистики и т.д.).

Но если будем разделять, то для передачи картинки, например в свойстве image передавать изображение в base64.
Подписываться на сокеты я буду сразу при заходе в приложение. Но, чтобы не гнать лишний трафик там, где не нужно, предлагаю начинать трансляцию после
собщения с фронта. Буду отправлять что-то типа readyForStreaming: true/false, или посылать команду startStreaming, stopStreaming;

Попозже еще подумаю, как сконфигурировать модель для json. Можно сделть разделение. У нас будут statistics, reports, events, map, notifications. Можно например передавать флаг в каждом сообщении, к какому типу оно тносится.


